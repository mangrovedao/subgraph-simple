type Account @entity {
  id: Bytes!
  address: Bytes!
  creationDate: BigInt!
  latestInteractionDate: BigInt!
  proxyDeployed: Boolean!
  proxy: Bytes

  isReferrer: Boolean!

  referrer: Account
  referrals: [Account!]! @derivedFrom(field: "referrer")
}

type Token @entity {
  id: Bytes!
  address: Bytes!
  name: String!
  symbol: String!
  decimals: BigInt!
}

type Market @entity {
  id: String!
  outbound_tkn: Bytes! # address
  inbound_tkn: Bytes! # address
  tickSpacing: BigInt!
  active: Boolean!
  gasbase: BigInt!
  fee: BigInt!
}

type Offer @entity {
  id: String!
  latestTransactionHash: Bytes!
  latestLogIndex: BigInt!
  creationDate: BigInt!
  latestUpdateDate: BigInt!
  offerId: BigInt!
  tick: BigInt!
  gives: BigInt!
  gasprice: BigInt!
  gasreq: BigInt!
  gasBase: BigInt!
  isOpen: Boolean!
  isFailed: Boolean!
  isFilled: Boolean!
  isRetracted: Boolean!
  failedReason: Bytes
  posthookFailReason: Bytes
  deprovisioned: Boolean!
  latestPenalty: BigInt!
  totalPenalty: BigInt!
  totalGot: BigInt!
  totalGave: BigInt!
  prevGives: BigInt
  prevTick: BigInt

  market: Market!
  maker: Account!
  owner: Account
  limitOrder: LimitOrder
  kandel: Kandel
  kandelIndex: BigInt
  amplifiedOffer: AmplifiedOffer
}

type OfferFilled @entity {
  id: String!

  creationDate: BigInt
  transactionHash: Bytes!

  taker: Account!
  account: Account!
  market: Market!

  makerGot: BigInt!
  makerGave: BigInt!

  offer: Offer
}

type CleanOrder @entity {
  id: String!
  transactionHash: Bytes!
  creationDate: BigInt!

  taker: Account!
  offersToBeCleaned: BigInt!
  orders: [Order!]! @derivedFrom(field: "cleanOrder")

  market: Market
}

type Order @entity {
  id: String!
  transactionHash: Bytes!
  creationDate: BigInt!

  fillVolume: BigInt!
  fillWants: Boolean!
  maxTick: BigInt!
  taker: Account!
  takerGot: BigInt!
  takerGave: BigInt!
  penalty: BigInt!
  feePaid: BigInt!

  market: Market
  limitOrder: LimitOrder
  cleanOrder: CleanOrder
}

type AmplifiedOffer @entity {
  id: String!

  inboundRoute: Bytes
  outboundRoute: Bytes

  bundle: AmplifiedOfferBundle!
  owner: Account
  offer: Offer!
}

type AmplifiedOfferBundle @entity {
  id: String!
  creationDate: BigInt!
  bundleId: BigInt!
  expiryDate: BigInt!

  offers: [AmplifiedOffer!]!
  owner: Account
}

type LimitOrder @entity {
  id: String!
  creationDate: BigInt!
  latestUpdateDate: BigInt!
  expiryDate: BigInt
  maxVolume: BigInt
  orderType: Int!
  tick: BigInt!
  fillVolume: BigInt!
  fillWants: Boolean!

  realTaker: Account!

  inboundRoute: Bytes!
  outboundRoute: Bytes!

  offer: Offer
  order: Order

  isOpen: Boolean
}

type KandelDepositWithdraw @entity {
  id: String!
  transactionHash: Bytes!
  date: BigInt!
  token: Bytes!
  amount: BigInt!
  isDeposit: Boolean!

  kandel: Kandel!
}

type Kandel @entity {
  id: Bytes!
  transactionHash: Bytes!
  creationDate: BigInt!

  seeder: Bytes!
  address: Bytes!

  base: Bytes!
  quote: Bytes!
  baseQuoteOlKeyHash: Bytes!
  quoteBaseOlKeyHash: Bytes!
  deployer: Account!
  admin: Account!

  inboundRoute: Bytes
  outboundRoute: Bytes

  type: String!

  # Only for kandel AAVE
  reserveId: Bytes
  router: Bytes

  depositedBase: BigInt!
  depositedQuote: BigInt!

  totalPublishedBase: BigInt!
  totalPublishedQuote: BigInt!

  # Parameters
  gasprice: BigInt
  gasreq: BigInt
  stepSize: BigInt
  baseQuoteTickOffset: BigInt
  length: BigInt

  offerIndexes: [String!]!

  offers: [Offer!]! @derivedFrom(field: "kandel")
  depositWithdraws: [KandelDepositWithdraw!]! @derivedFrom(field: "kandel")
  parameters: [KandelParameters!]! @derivedFrom(field: "kandel")
  populateRetracts: [KandelPopulateRetract!]! @derivedFrom(field: "kandel")
}

type KandelPopulateRetract @entity {
  id: String!
  transactionHash: Bytes!
  creationDate: BigInt!
  startLogIndex: BigInt!

  isRetract: Boolean!
  offerGives: [String!]!

  kandel: Kandel!
}

type KandelParameters @entity {
  id: String!
  transactionHash: Bytes!
  creationDate: BigInt!

  gasprice: BigInt
  gasreq: BigInt
  baseQuoteTickOffset: BigInt
  stepSize: BigInt
  length: BigInt

  kandel: Kandel!
}

type Stack @entity {
  id: String!
  ids: String!
}

type Weight @entity {
  id: String!
  base: Bytes!
  quote: Bytes!
  fromBlock: BigInt!
  toBlock: BigInt!
  takerPointsPerDollar: BigInt!
  makerToTakerRatio: BigInt!
  ncMakerToCMakerRatio: BigInt!
  maxSpread: BigInt!
}
