type Account @entity {
  id: Bytes!
  address: Bytes!
  proxyDeployed: Boolean!
  proxy: Bytes
}

type Market @entity {
  id: String!
  outbound_tkn: Bytes! # address
  inbound_tkn: Bytes! # address
  tickSpacing: BigInt!
  active: Boolean!
}

type Offer @entity {
  id: String!
  latestTransactionHash: Bytes!
  latestLogIndex: BigInt!
  creationDate: BigInt!
  latestUpdateDate: BigInt!
  offerId: BigInt!

  isOpen: Boolean!
  failedReason: Bytes
  posthookFailReason: Bytes

  market: Market!
  maker: Account!
  owner: Account
  limitOrder: LimitOrder
  kandel: Kandel
  kandelIndex: BigInt

  totalGot: BigInt!
  totalGave: BigInt!
}

type OfferFilled @entity {
  id: String!

  creationDate: BigInt
  transactionHash: Bytes!

  taker: Account!
  account: Account!
  market: Market!

  makerGot: BigInt!
  makerGave: BigInt!

  offer: Offer
}

type Order @entity {
  id: String!
  transactionHash: Bytes!
  creationDate: BigInt!

  fillVolume: BigInt!
  fillWants: Boolean!
  maxTick: BigInt!
  taker: Account!
  takerGot: BigInt!
  takerGave: BigInt!
  penalty: BigInt!
  feePaid: BigInt!

  market: Market
  limitOrder: LimitOrder
}

type LimitOrder @entity {
  id: String!
  creationDate: BigInt!
  latestUpdateDate: BigInt!

  orderType: Int!
  tick: BigInt!

  fillVolume: BigInt!
  fillWants: Boolean!

  realTaker: Account!

  offer: Offer
  order: Order

  isOpen: Boolean
}

type Kandel @entity {
  id: Bytes!
  transactionHash: Bytes!
  creationDate: BigInt!

  seeder: Bytes!
  address: Bytes!

  admin: Account!
  type: String!

  offerIndexes: [String!]!
  offers: [Offer!]! @derivedFrom(field: "kandel")
}

type Stack @entity {
  id: String!
  ids: String!
}
